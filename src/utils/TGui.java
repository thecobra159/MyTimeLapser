package utils;

import controller.Controller;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;

public class TGui extends javax.swing.JFrame {
    public Controller controller;

    /**
     * Creates new form TGui
     *
     * @param controller
     */
    public TGui(Controller controller) {
        initComponents();
        addListeners();
        setResolution();
        this.controller = controller;

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(TGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        toogleRecording = new javax.swing.JToggleButton();
        preview = new javax.swing.JLabel();
        project_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        resolution_height = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        resolution_width = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fps_input = new javax.swing.JTextField();
        fps_hint = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        savepath = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        saving_location = new javax.swing.JLabel();
        format = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        areaselectorbtn = new javax.swing.JButton();

        jLabel9.setText("Advanced");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TimeLapser");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        toogleRecording.setText("Start recording");
        toogleRecording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toogleRecordingActionPerformed(evt);
            }
        });

        preview.setBackground(new java.awt.Color(255, 255, 255));
        preview.setText("Preview");
        preview.setToolTipText("");
        preview.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        preview.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        project_name.setText("Project name");
        project_name.setMaximumSize(new java.awt.Dimension(6, 20));
        project_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                project_nameActionPerformed(evt);
            }
        });

        jLabel2.setText("Quick preview:");

        jCheckBox1.setText("Show mouse cursor");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Resolution:");

        resolution_height.setText("1800");
        resolution_height.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolution_heightActionPerformed(evt);
            }
        });

        jLabel3.setText("x");

        resolution_width.setText("1900");
        resolution_width.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolution_widthActionPerformed(evt);
            }
        });

        jLabel4.setText("Frame number: (Start a recording) ");

        jLabel5.setText("FPS");

        fps_input.setText("60");
        fps_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fps_inputActionPerformed(evt);
            }
        });

        fps_hint.setText("60 seconds");

        jLabel7.setText("A frame will be taken every:");

        savepath.setText("Change location");

        jLabel6.setText("Saving location:");

        saving_location.setText("Location here");

        format.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"png", "jpeg", "gif"}));
        format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatActionPerformed(evt);
            }
        });

        jLabel8.setText("Format:");

        areaselectorbtn.setText("Custom recording area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(areaselectorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(savepath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(saving_location, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(toogleRecording, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(80, 80, 80))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jCheckBox1)
                                                        .addComponent(jLabel5)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(10, 10, 10)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(fps_hint, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(resolution_height, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                                                                        .addComponent(fps_input))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(jLabel3)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(resolution_width, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(format, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(1, 1, 1)
                                                                .addComponent(project_name, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4)
                                                        .addComponent(preview, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(project_name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(jCheckBox1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel1)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(26, 26, 26)
                                                                .addComponent(jLabel5))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(format, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(resolution_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jLabel3)
                                                                .addComponent(resolution_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fps_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel7)
                                                        .addComponent(fps_hint))
                                                .addGap(25, 25, 25)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(saving_location)
                                                        .addComponent(jLabel6)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(preview, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(toogleRecording, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(savepath)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(areaselectorbtn)
                                                .addGap(0, 22, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void toogleRecordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toogleRecordingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toogleRecordingActionPerformed

    private void project_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_project_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_project_nameActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void resolution_heightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolution_heightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resolution_heightActionPerformed

    private void resolution_widthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolution_widthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resolution_widthActionPerformed

    private void fps_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fps_inputActionPerformed

    }//GEN-LAST:event_fps_inputActionPerformed

    private void formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton areaselectorbtn;
    private javax.swing.JComboBox format;
    private javax.swing.JLabel fps_hint;
    private javax.swing.JTextField fps_input;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel preview;
    private javax.swing.JTextField project_name;
    private javax.swing.JTextField resolution_height;
    private javax.swing.JTextField resolution_width;
    private javax.swing.JButton savepath;
    private javax.swing.JLabel saving_location;
    private javax.swing.JToggleButton toogleRecording;

    private String last_valid_fps = "60";

    public JLabel getPreview() {
        return preview;
    }

    public int getRHeight() {
        return Integer.parseInt(resolution_width.getText());
    }

    public int getRWidth() {
        return Integer.parseInt(resolution_height.getText());
    }

    public String getFPS() {
        return fps_input.getText();
    }

    public int getFrameRate() { //IN MS
        String frameRate = getFPS();

        if (getFPS().equals("")) {
            frameRate = "60";
        }

        int seconds_f = Integer.parseInt(frameRate) / 60;

        return seconds_f * 1000;
    }

    public void setFPShint(String fps) {
        fps_hint.setText(fps + " seconds");
    }

    public static boolean isNumeric(String str) {
        try {
            double d = Double.parseDouble(str);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }


    private void addListeners() {


        //FPS

        fps_input.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (isNumeric(fps_input.getText())) {
                    setFPShint(fps_input.getText());
                    System.out.println("Hint updated 1");
                    last_valid_fps = fps_input.getText();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (isNumeric(fps_input.getText())) {
                    setFPShint(fps_input.getText());
                    System.out.println("Hint updated 1");
                    last_valid_fps = fps_input.getText();
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //Not fired
            }
        });
        fps_input.revalidate();


        //Project Name

        project_name.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                controller.setProjectName(project_name.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                controller.setProjectName(project_name.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //Not fired
            }
        });

        project_name.revalidate();


        //Start Recording

        ActionListener togglebtn = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                AbstractButton abstractButton = (AbstractButton) actionEvent.getSource();
                if (abstractButton.getModel().isSelected()) {
                    System.out.println("Sttarted");

                    controller.startRecording();
                    toogleRecording.setText("Stop recording");
//                    controller.recorder.execute();

                } else {
//                    controller.stopRecording();
                    System.out.println("Stoped");
                    System.exit(0);
                }
            }
        };

        toogleRecording.addActionListener(togglebtn);

        toogleRecording.revalidate();


        //Path to save

        ActionListener savebtn = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fc.setAcceptAllFileFilterUsed(false);
                int result = fc.showOpenDialog(controller.gui);
                if (result == JFileChooser.APPROVE_OPTION) {
                    controller.savePath(fc.getSelectedFile().getAbsolutePath());
                }
            }
        };

        savepath.addActionListener(savebtn);
        savepath.revalidate();

        //Recording size

        //Path to save

        ActionListener areabtn = new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                new AreaSelector(controller);
            }
        };

        areaselectorbtn.addActionListener(areabtn);
        areaselectorbtn.revalidate();

    }

    private void setResolution() {
        int x = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
        int y = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();

        resolution_width.setText(Integer.toString(x));
        resolution_height.setText(Integer.toString(y));

    }

    public void lockOptions() {
        resolution_height.setEnabled(false);
        resolution_width.setEnabled(false);
        fps_input.setEnabled(false);
        project_name.setEnabled(false);
        savepath.setEnabled(false);
        format.setEnabled(false);
    }

    public void unlockOptions() {
        resolution_height.setEnabled(true);
        resolution_width.setEnabled(true);
        fps_input.setEnabled(true);
        project_name.setEnabled(true);
        savepath.setEnabled(true);
        format.setEnabled(true);
    }

    public void updateSaveLocationHint(String location) {

        saving_location.setText(location);
        saving_location.revalidate();
    }

    public String getFormat() {
        return (String) format.getSelectedItem();
    }
}
